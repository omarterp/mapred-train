import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.lang.reflect.Array;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;

public class MP0 {
    Random generator;
    String userName;
    String inputFileName;
    String delimiters = "[ \t,;\\.\\?\\!-:@\\[\\](){}_\\*/]";
    String[] stopWordsArray = {"i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours",
            "yourself", "yourselves", "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its",
            "itself", "they", "them", "their", "theirs", "themselves", "what", "which", "who", "whom", "this", "that",
            "these", "those", "am", "is", "are", "was", "were", "be", "been", "being", "have", "has", "had", "having",
            "do", "does", "did", "doing", "a", "an", "the", "and", "but", "if", "or", "because", "as", "until", "while",
            "of", "at", "by", "for", "with", "about", "against", "between", "into", "through", "during", "before",
            "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off", "over", "under", "again",
            "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any", "both", "each",
            "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so", "than",
            "too", "very", "s", "t", "can", "will", "just", "don", "should", "now"};

    void initialRandomGenerator(String seed) throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA");
        messageDigest.update(seed.toLowerCase().trim().getBytes());
        byte[] seedMD5 = messageDigest.digest();

        long longSeed = 0;
        for (int i = 0; i < seedMD5.length; i++) {
            longSeed += ((long) seedMD5[i] & 0xffL) << (8 * i);
        }

        this.generator = new Random(longSeed);
    }

    Integer[] getIndexes() throws NoSuchAlgorithmException {
        Integer n = 10000;
        Integer number_of_lines = 50000;
        Integer[] ret = new Integer[n];
        this.initialRandomGenerator(this.userName);
        for (int i = 0; i < n; i++) {
            ret[i] = generator.nextInt(number_of_lines);
        }
        return ret;
    }

    public MP0(String userName, String inputFileName) {
        this.userName = userName;
        this.inputFileName = inputFileName;
    }

    /**
     * Process input file, based on indexes generated by the getIndexes() method.
     * String array and output file are created
     * @return
     *  Returns Array string of top 20 words
     * @throws Exception
     */
    public String[] process() throws Exception {
        int numTopWords = 20;
        String[] ret = new String[numTopWords];

        Map<String, Integer> wordCounter = new HashMap<>();
        List<String> stopWords = Arrays.asList(stopWordsArray);
        Map<String, Integer> sortedWordList = new HashMap<>();

        int index = 0;
        List<Integer> processIndexList = Arrays.asList(getIndexes());
        // Keyed index to ensure index can be reprocessed as dictated by the process indexList
        Map<Integer, String[]> processLines = new HashMap<>();

        // Get process lines based on indexes to process
        try(BufferedReader br = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(inputFileName)))){
            String line;
            while((line = br.readLine()) != null) {
                if(processIndexList.contains(index)) {
                    processLines.put(index, line.split(delimiters));
                }
                // increment index to align with process index list
                index++;
            }
        }

        // Run through processIndexList to perform selective word count operations
        for(int i : processIndexList) {
            String[] tokens = processLines.get(i);

            for(String token : tokens) {
                String word = token.trim().toLowerCase();
                // Proceed with word if it is not a stop word
                if (word.length() > 0 && !stopWords.contains(word)) {
                    // Add word to word counter, if not exists, else increment counter
                    if (wordCounter.containsKey(word)) {
                        wordCounter.put(word, wordCounter.get(word) + 1);
                    } else {
                        wordCounter.put(word, 1);
                    }
                }
            }
        }

        // Sort word list in desceding order, based on count - ties will be lexically sorted
        sortedWordList = sortWords(wordCounter);

        // Populate ret, which will contain top 20 words and write to output file
        try(RandomAccessFile raf = new RandomAccessFile(Paths.get(".").toAbsolutePath() + "output.txt", "rw")) {
            int i = 0;
            for (String key : sortedWordList.keySet()) {
                // Handle output for as many words as numTopWords is set to - in this case hard coded to 20.
                if(i < numTopWords) {
                    ret[i++] = key;
                    raf.writeBytes(key + System.lineSeparator());
                }
            }
        }

        return ret;
    }

    /**
     *  Sort words in descending order, based on word counts - ties will be lexically sorted
      */
    private static Map<String, Integer> sortWords(Map<String, Integer> wordCounts) {
        // Create a Linked List of Map entries
        List<Map.Entry<String, Integer>> list = new LinkedList<Map.Entry<String, Integer>>(wordCounts.entrySet());

        // Composite comparator that will sort primarily on word count - descending and then on lexically ascending
        Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
            public int compare(Map.Entry<String, Integer> o1,
                               Map.Entry<String, Integer> o2) {
                int primarySort = o2.getValue().compareTo(o1.getValue());
                int secondarySort = o1.getKey().compareTo(o2.getKey());

                return primarySort != 0 ? primarySort : secondarySort;
            }
        });

        // Populated sorted map, which preserves order
        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();
        for(Map.Entry<String, Integer> entry : list) {
            sortedMap.put(entry.getKey(), entry.getValue());
        }
        return sortedMap;
    }


    public static void main(String[] args) throws Exception {
        if (args.length < 1){
            System.out.println("MP0 <User ID>");
        }
        else {
            String userName = args[0];
            String inputFileName = "./input.txt";
            MP0 mp = new MP0(userName, inputFileName);
            String[] topItems = mp.process();
            for (String item: topItems){
                System.out.println(item);
            }
        }
    }
}
